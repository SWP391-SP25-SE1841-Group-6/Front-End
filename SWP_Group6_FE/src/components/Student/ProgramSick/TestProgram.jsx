import { useState } from "react";
import { Link } from "react-router-dom";
import PropTypes from 'prop-types';
import {
  Button,
  Card,
  CardContent,
  Typography,
  Tabs,
  Tab,
  Box,
  CircularProgress
} from "@mui/material";
import instance from "../../config/axios";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faCircleXmark, faClock, faPhone } from "@fortawesome/free-solid-svg-icons";

const TabPanel = ({ children, value, index, ...other }) => {
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      className="transition-opacity duration-300"
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }} className="bg-white rounded-lg">
          <Typography component="div">{children}</Typography>
        </Box>
      )}
    </div>
  );
};

TabPanel.propTypes = {
  children: PropTypes.node,
  value: PropTypes.number.isRequired,
  index: PropTypes.number.isRequired
};

const QUESTIONS = [
  "B·∫°n c√≥ th∆∞·ªùng xuy√™n lo l·∫Øng qu√° m·ª©c kh√¥ng?",
  "B·∫°n c√≥ c·∫£m th·∫•y bu·ªìn b√£ ho·∫∑c m·∫•t h·ª©ng th√∫ v·ªõi c√°c ho·∫°t ƒë·ªông h√†ng ng√†y kh√¥ng?",
  "B·∫°n c√≥ c·∫£m th·∫•y kh√≥ t·∫≠p trung ho·∫∑c d·ªÖ b·ªã ph√¢n t√¢m kh√¥ng?",
  "B·∫°n c√≥ th∆∞·ªùng xuy√™n c·∫£m th·∫•y m·ªát m·ªèi ho·∫∑c kh√¥ng c√≥ nƒÉng l∆∞·ª£ng kh√¥ng?",
  "B·∫°n c√≥ g·∫∑p kh√≥ khƒÉn trong gi·∫•c ng·ªß (kh√≥ ng·ªß ho·∫∑c ng·ªß qu√° nhi·ªÅu) kh√¥ng?",
  "B·∫°n c√≥ c·∫£m th·∫•y √°p l·ª±c t·ª´ c√¥ng vi·ªác ho·∫∑c h·ªçc t·∫≠p qu√° l·ªõn kh√¥ng?",
  "B·∫°n c√≥ c·∫£m th·∫•y b·ªã c√¥ l·∫≠p ho·∫∑c xa c√°ch v·ªõi m·ªçi ng∆∞·ªùi kh√¥ng?",
  "B·∫°n c√≥ suy nghƒ© ti√™u c·ª±c v·ªÅ b·∫£n th√¢n ho·∫∑c c·∫£m th·∫•y v√¥ d·ª•ng kh√¥ng?",
];

const EMOJIS = [
  { value: 1, label: "Qu√° t·ªá", icon: "üòû" },
  { value: 2, label: "Kh√¥ng ·ªïn l·∫Øm", icon: "üôÅ" },
  { value: 3, label: "B√¨nh th∆∞·ªùng", icon: "üòê" },
  { value: 4, label: "·ªîn", icon: "üôÇ" },
  { value: 5, label: "Tuy·ªát v·ªùi", icon: "üòç" },
];

const TestProgram = () => {
  const [ratings, setRatings] = useState(Array(QUESTIONS.length).fill(0));
  const [result, setResult] = useState("");
  const [tabValue, setTabValue] = useState(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const handleRating = (index, value) => {
    setRatings(prev => {
      const newRatings = [...prev];
      newRatings[index] = value;
      return newRatings;
    });

    if (tabValue < QUESTIONS.length - 1) {
      setTimeout(() => setTabValue(tabValue + 1), 300);
    }
  };

  const submitAnswers = async () => {
    setLoading(true);
    setError("");
    try {
      // T·∫°o m·ªôt m·∫£ng ch·ª©a t·∫•t c·∫£ c√¢u tr·∫£ l·ªùi
      const answers = QUESTIONS.map((question, i) => {
        const emoji = EMOJIS.find(e => e.value === ratings[i]);
        if (!emoji) {
          throw new Error("Vui l√≤ng ƒë√°nh gi√° t·∫•t c·∫£ c√°c c√¢u h·ªèi");
        }
        return {
          qtypeId: 0,
          question: `${question} - ƒê√°nh gi√°: ${emoji.label} (${emoji.icon})`
        };
      });
  
      // Ki·ªÉm tra xem c√≥ c√¢u tr·∫£ l·ªùi n√†o b·ªã null kh√¥ng
      if (answers.some(answer => !answer.question)) {
        throw new Error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c c√¢u h·ªèi");
      }
  
      // G·ª≠i t·ª´ng c√¢u h·ªèi m·ªôt v√† ƒë·ª£i ho√†n th√†nh tr∆∞·ªõc khi g·ª≠i c√¢u ti·∫øp theo
      for (const answer of answers) {
        await instance.post('/Question', answer);
        console.log('Sent answer:', answer);
      }
  
      setResult("Kh·∫£o s√°t ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");
    } catch (err) {
      console.error('Error:', err);
      if (err.response?.data?.message) {
        // X·ª≠ l√Ω l·ªói t·ª´ server
        setError(err.response.data.message);
      } else if (err.message.includes("duplicate")) {
        // X·ª≠ l√Ω l·ªói tr√πng l·∫∑p
        setError("C√¢u tr·∫£ l·ªùi ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng");
      } else {
        // X·ª≠ l√Ω c√°c l·ªói kh√°c
        setError(err.message || "C√≥ l·ªói x·∫£y ra khi g·ª≠i kh·∫£o s√°t. Vui l√≤ng th·ª≠ l·∫°i!");
      }
    } finally {
      setLoading(false);
    }
  };
  
  // S·ª≠a l·∫°i h√†m handleSubmit
  const handleSubmit = async () => {
    // Ki·ªÉm tra xem ƒë√£ ƒë√°nh gi√° h·∫øt c√°c c√¢u h·ªèi ch∆∞a
    if (ratings.includes(0)) {
      setError("Vui l√≤ng ƒë√°nh gi√° t·∫•t c·∫£ c√°c c√¢u h·ªèi!");
      return;
    }
  
    try {
      // T√≠nh ƒëi·ªÉm v√† hi·ªÉn th·ªã k·∫øt qu·∫£
      const totalScore = ratings.reduce((acc, score) => acc + score, 0);
      let resultMessage = "";
  
      if (totalScore < 16) {
        resultMessage = "B·∫°n c√≥ t√¢m l√Ω ·ªïn ƒë·ªãnh.";
      } else if (totalScore <= 24) {
        resultMessage = "B·∫°n c√≥ d·∫•u hi·ªáu lo √¢u nh·∫π.";
      } else {
        resultMessage = "B·∫°n c√≥ d·∫•u hi·ªáu t√¢m l√Ω c·∫ßn quan t√¢m.";
      }
  
      setResult(resultMessage);
      
      // G·ª≠i c√¢u tr·∫£ l·ªùi
      await submitAnswers();
    } catch (error) {
      console.error('Submit error:', error);
      setError(error.message);
    }
  };
  

  return (
    <div className="min-h-screen bg-gray-100 p-4">
      <Typography variant="h4" align="center" className="font-bold text-gray-800 mb-6">
        TU·∫¶N N√ÄY V·ªöI EM TH·∫æ N√ÄO?
      </Typography>

      <div className=" grid grid-cols-5 gap-4 mb-6  p-6 rounded-xl shadow-md">
        {EMOJIS.map((emoji) => (
          <div
            key={emoji.value}
            className=" flex flex-col items-center space-y-2 p-3 rounded-lg hover:bg-white/30 transition-all duration-300"
          >
            <span className="text-6xl cursor-pointer transform hover:scale-110 transition-transform">
              {emoji.icon}
            </span>
            <span className="text-3xl font-medium text-gray-700">{emoji.label}</span>
          </div>
        ))}
      </div>

      <Card className="max-w-6xl mx-auto h-150 bg-white shadow-xl rounded-xl overflow-hidden">
        <CardContent className="p-6">
          <Tabs
            value={tabValue}
            onChange={(_, newValue) => setTabValue(newValue)}
            variant="scrollable"
            scrollButtons="auto"
            aria-label="c√¢u h·ªèi t√¢m l√Ω"
            className="mb-6"
            sx={{
              '& .MuiTabs-indicator': {
                backgroundColor: '#3B82F6',
              },
            }}
          >
            {QUESTIONS.map((_, index) => (
              <Tab
                key={index}
                label={`C√¢u ${index + 1}`}
                className={`text-6xl font-medium ${
                  ratings[index] > 0 ? 'text-blue-600 text-6xl' : ''
                }`}
              />
            ))}
          </Tabs>

          {QUESTIONS.map((question, index) => (
            <TabPanel key={index} value={tabValue} index={index}>
              <Typography className="text-xl h-20 font-medium text-gray-700 mb-6">
                {index + 1}. {question}
              </Typography>
              <div className="flex justify-center gap-6 mt-4 text-2xl">
                {EMOJIS.map((emoji) => (
                  <button
                    key={emoji.value}
                    onClick={() => handleRating(index, emoji.value)}
                    className={`p-4 rounded-xl transition-all transform hover:scale-110 ${
                      ratings[index] === emoji.value
                        ? 'bg-blue-500 text-white shadow-lg scale-105'
                        : 'bg-gray-100 hover:bg-gray-200'
                    }`}
                  >
                    <span className="text-8xl block mb-2">{emoji.icon}</span>
                    <p className="text-2xl font-medium ">{emoji.label}</p>
                  </button>
                ))}
              </div>
            </TabPanel>
          ))}
        </CardContent>
      </Card>

      {result && (
        <div className="mt-6 p-4 bg-blue-100 border border-blue-200 text-blue-900 font-semibold rounded-xl text-center animate-fade-in">
          {result}
        </div>
      )}
      
      {error && (
        <div className="mt-4 p-4 bg-red-50 border border-red-200 text-red-700 font-semibold rounded-xl text-center animate-fade-in">
          {error}
        </div>
      )}

      <div className="  flex justify-between mt-6 max-w-3xl mx-auto gap-4">
        <Button
          variant="contained"
          component={Link}
          to="/studenthome"
          className="w-1/3 bg-gray-500 hover:bg-gray-600 !text-3xl "
        >
          Quay l·∫°i
        </Button>
        <Button
          variant="contained"
          onClick={handleSubmit}
          disabled={loading}
          className="w-1/3 bg-blue-600 hover:bg-blue-700 !text-3xl"
        >
          {loading ? (
            <div className="flex items-center " >
              <CircularProgress size={20} color="inherit" className="mr-2 text-3xl" />
              ƒêang g·ª≠i...
            </div>
          ) : (
            "X√°c nh·∫≠n "
          )}
        </Button>
        <Button
         component={Link}
          to="/studenthome/khaosat"
          variant="contained"
          className="w-1/3 bg-gray-400 hover:bg-gray-500 !text-2xl !text-center"
        >
          Kh√¥ng mu·ªën tr·∫£ l·ªùi
        </Button>
      </div>

      <div className="mt-6 text-center">
    <div className="flex mt-5 justify-center gap-10 text-xl text-blue-950 font-bold cursor-pointer underline">
             <Link to="/studenthome/khaosat" className="!text-blue-900" >
                 <FontAwesomeIcon icon={faClock} className="!text-blue-900"/>  B·ªè qua kh·∫£o s√°t
               </Link>
               <Link to="/studenthome/hengap" className="!text-blue-900" >
               <FontAwesomeIcon icon={faCircleXmark}  className="!text-blue-900"/> H·∫πn g·∫∑p
               </Link>
               
               <Link to="/studenthome/khancap" className="!text-blue-900" >
               <FontAwesomeIcon icon={faPhone}  className="!text-blue-900"/> Kh·∫ßn c·∫•p
               </Link>
          
   
             </div>
      </div>
    </div>
  );
};

export default TestProgram;
